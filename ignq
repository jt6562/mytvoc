Help on built-in module signal:

NNAAMMEE
    signal - This module provides mechanisms to use signal handlers in Python.

FFIILLEE
    (built-in)

MMOODDUULLEE  DDOOCCSS
    http://docs.python.org/library/signal

DDEESSCCRRIIPPTTIIOONN
    Functions:
    
    alarm() -- cause SIGALRM after a specified time [Unix only]
    setitimer() -- cause a signal (described below) after a specified
                   float time and the timer may restart then [Unix only]
    getitimer() -- get current value of timer [Unix only]
    signal() -- set the action for a given signal
    getsignal() -- get the signal action for a given signal
    pause() -- wait until a signal arrives [Unix only]
    default_int_handler() -- default SIGINT handler
    
    signal constants:
    SIG_DFL -- used to refer to the system default handler
    SIG_IGN -- used to ignore the signal
    NSIG -- number of defined signals
    SIGINT, SIGTERM, etc. -- signal numbers
    
    itimer constants:
    ITIMER_REAL -- decrements in real time, and delivers SIGALRM upon
                   expiration
    ITIMER_VIRTUAL -- decrements only when the process is executing,
                   and delivers SIGVTALRM upon expiration
    ITIMER_PROF -- decrements both when the process is executing and
                   when the system is executing on behalf of the process.
                   Coupled with ITIMER_VIRTUAL, this timer is usually
                   used to profile the time spent by the application
                   in user and kernel space. SIGPROF is delivered upon
                   expiration.
    
    
    *** IMPORTANT NOTICE ***
    A signal handler function is called with two arguments:
    the first is the signal number, the second is the interrupted stack frame.

CCLLAASSSSEESS
    exceptions.IOError(exceptions.EnvironmentError)
        ItimerError
    
    class IIttiimmeerrEErrrroorr(exceptions.IOError)
     |  Method resolution order:
     |      ItimerError
     |      exceptions.IOError
     |      exceptions.EnvironmentError
     |      exceptions.StandardError
     |      exceptions.Exception
     |      exceptions.BaseException
     |      __builtin__.object
     |  
     |  Data descriptors defined here:
     |  
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.IOError:
     |  
     |  ____iinniitt____(...)
     |      x.__init__(...) initializes x; see help(type(x)) for signature
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from exceptions.IOError:
     |  
     |  ____nneeww____ = <built-in method __new__ of type object>
     |      T.__new__(S, ...) -> a new object with type S, a subtype of T
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.EnvironmentError:
     |  
     |  ____rreedduuccee____(...)
     |  
     |  ____ssttrr____(...)
     |      x.__str__() <==> str(x)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.EnvironmentError:
     |  
     |  eerrrrnnoo
     |      exception errno
     |  
     |  ffiilleennaammee
     |      exception filename
     |  
     |  ssttrreerrrroorr
     |      exception strerror
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from exceptions.BaseException:
     |  
     |  ____ddeellaattttrr____(...)
     |      x.__delattr__('name') <==> del x.name
     |  
     |  ____ggeettaattttrriibbuuttee____(...)
     |      x.__getattribute__('name') <==> x.name
     |  
     |  ____ggeettiitteemm____(...)
     |      x.__getitem__(y) <==> x[y]
     |  
     |  ____ggeettsslliiccee____(...)
     |      x.__getslice__(i, j) <==> x[i:j]
     |      
     |      Use of negative indices is not supported.
     |  
     |  ____rreepprr____(...)
     |      x.__repr__() <==> repr(x)
     |  
     |  ____sseettaattttrr____(...)
     |      x.__setattr__('name', value) <==> x.name = value
     |  
     |  ____sseettssttaattee____(...)
     |  
     |  ____uunniiccooddee____(...)
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from exceptions.BaseException:
     |  
     |  ____ddiicctt____
     |  
     |  aarrggss
     |  
     |  mmeessssaaggee

FFUUNNCCTTIIOONNSS
    aallaarrmm(...)
        alarm(seconds)
        
        Arrange for SIGALRM to arrive after the given number of seconds.
    
    ddeeffaauulltt__iinntt__hhaannddlleerr(...)
        default_int_handler(...)
        
        The default handler for SIGINT installed by Python.
        It raises KeyboardInterrupt.
    
    ggeettiittiimmeerr(...)
        getitimer(which)
        
        Returns current value of given itimer.
    
    ggeettssiiggnnaall(...)
        getsignal(sig) -> action
        
        Return the current action for the given signal.  The return value can be:
        SIG_IGN -- if the signal is being ignored
        SIG_DFL -- if the default action for the signal is in effect
        None -- if an unknown handler is in effect
        anything else -- the callable Python object used as a handler
    
    ppaauussee(...)
        pause()
        
        Wait until a signal arrives.
    
    sseett__wwaakkeeuupp__ffdd(...)
        set_wakeup_fd(fd) -> fd
        
        Sets the fd to be written to (with '\0') when a signal
        comes in.  A library can use this to wakeup select or poll.
        The previous fd is returned.
        
        The fd must be non-blocking.
    
    sseettiittiimmeerr(...)
        setitimer(which, seconds[, interval])
        
        Sets given itimer (one of ITIMER_REAL, ITIMER_VIRTUAL
        or ITIMER_PROF) to fire after value seconds and after
        that every interval seconds.
        The itimer can be cleared by setting seconds to zero.
        
        Returns old values as a tuple: (delay, interval).
    
    ssiiggiinntteerrrruupptt(...)
        siginterrupt(sig, flag) -> None
        change system call restart behaviour: if flag is False, system calls
        will be restarted when interrupted by signal sig, else system calls
        will be interrupted.
    
    ssiiggnnaall(...)
        signal(sig, action) -> action
        
        Set the action for the given signal.  The action can be SIG_DFL,
        SIG_IGN, or a callable Python object.  The previous action is
        returned.  See getsignal() for possible return values.
        
        *** IMPORTANT NOTICE ***
        A signal handler function is called with two arguments:
        the first is the signal number, the second is the interrupted stack frame.

DDAATTAA
    IITTIIMMEERR__PPRROOFF = 2L
    IITTIIMMEERR__RREEAALL = 0L
    IITTIIMMEERR__VVIIRRTTUUAALL = 1L
    NNSSIIGG = 65
    SSIIGGAABBRRTT = 6
    SSIIGGAALLRRMM = 14
    SSIIGGBBUUSS = 7
    SSIIGGCCHHLLDD = 17
    SSIIGGCCLLDD = 17
    SSIIGGCCOONNTT = 18
    SSIIGGFFPPEE = 8
    SSIIGGHHUUPP = 1
    SSIIGGIILLLL = 4
    SSIIGGIINNTT = 2
    SSIIGGIIOO = 29
    SSIIGGIIOOTT = 6
    SSIIGGKKIILLLL = 9
    SSIIGGPPIIPPEE = 13
    SSIIGGPPOOLLLL = 29
    SSIIGGPPRROOFF = 27
    SSIIGGPPWWRR = 30
    SSIIGGQQUUIITT = 3
    SSIIGGRRTTMMAAXX = 64
    SSIIGGRRTTMMIINN = 34
    SSIIGGSSEEGGVV = 11
    SSIIGGSSTTOOPP = 19
    SSIIGGSSYYSS = 31
    SSIIGGTTEERRMM = 15
    SSIIGGTTRRAAPP = 5
    SSIIGGTTSSTTPP = 20
    SSIIGGTTTTIINN = 21
    SSIIGGTTTTOOUU = 22
    SSIIGGUURRGG = 23
    SSIIGGUUSSRR11 = 10
    SSIIGGUUSSRR22 = 12
    SSIIGGVVTTAALLRRMM = 26
    SSIIGGWWIINNCCHH = 28
    SSIIGGXXCCPPUU = 24
    SSIIGGXXFFSSZZ = 25
    SSIIGG__DDFFLL = 0
    SSIIGG__IIGGNN = 1

